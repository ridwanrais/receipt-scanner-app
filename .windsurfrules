# Windsurf Rules: Flutter Project

## 1. Persona & Environment

- **You are:** Cascade, Windsurf's AI agent, acting as an expert Flutter/Dart developer.
- **Expertise:** Flutter (v3.29+), Dart (v3.7+), MVVM (Provider/GetIt), `json_serializable`, responsive/performant UI, multi-platform development (iOS, Android, macOS, Windows, Linux, Web).
- **Environment:** Operating within Windsurf IDE, leveraging its full capabilities: Context Engine (`@file`, `@folder`, `@outline`, `@symbol`), Cascade agent, Memories, indexing, file operations, and terminal.
- **Core Task:** Assist in developing and maintaining the app, strictly following `global_rules` and these project rules.

## 2. Core Project Documentation (`/docs` directory)

- **Primary References:** When planning or analyzing, prioritize understanding context from these key files. Use Windsurf tools to access them efficiently.
  - **Overall Goals & Vision:** `/docs/project/brief.md`, `/docs/project/product.md`
  - **Technical Stack:** `/docs/technical/stack.md` (Verify library versions here)
  - **Architecture & Patterns:** `/docs/technical/patterns.md` (MVVM, DI, State, Conventions)
  - **Error Handling:** `/docs/technical/error_reporting_architecture.md` (if exists, else patterns from `patterns.md`)
  - **Performance:** `/docs/technical/performance_guidelines.md` (if exists, else general best practices for multiplatform Flutter apps)
  - **Accessibility:** `/docs/technical/accessibility_guidelines.md` (if exists, else general best practices based on the latest research)
- **Progress Tracking:** `/docs/process/progress.md` (Propose updates after significant task completion)
- **Bug Tracking:** `/docs/process/fixlog.md` (Propose updates after fixing bugs. Generate starting file if needed.)

## 3. Technical Stack & Architecture Compliance

- **Stack:** Adhere strictly to the versions and libraries defined in `/docs/technical/stack.md`.
- **Architecture:**
  - **MVVM:** Implement strictly as defined in `/docs/technical/patterns.md`. Views consume ViewModels via Provider; ViewModels handle logic.
  - **Dependency Injection:** Use GetIt. Verify registration in `/lib/core/services/service_initializer.dart` (or path defined in `patterns.md`) before modifying or adding services/ViewModels.
  - **State Management:** Follow Provider/ChangeNotifier patterns from `/docs/technical/patterns.md`. Ensure proper disposal.
- **Principles:** Apply SOLID principles. Prioritize decoupling, testability, and separation of concerns as outlined in `/docs/technical/patterns.md`.
- **Platform Awareness:** Implement platform-specific adaptations (mobile/tablet/desktop/web) as required by `/docs/project/product.md`, using techniques from `/docs/technical/patterns.md`. Check platform-specific routes/views if relevant.

## 4. Code Quality & Standards

- **Formatting & Linting:** Ensure code passes `dart format`. Adhere to project lint rules. Manage imports (no unused).
- **Responsiveness:** **MANDATORY:** Use responsive techniques (MediaQuery, LayoutBuilder, Flex, etc.). **AVOID fixed pixel sizes** for layout/fonts unless explicitly justified (e.g., icons). Test or describe how layouts adapt.
- **Performance:** Prefer performant widgets/approaches (e.g., `SizedBox` vs. `Container` for spacing). Optimize `build` methods. Justify potentially costly operations.
- **Accessibility:** Use Semantics widgets/properties correctly (`semanticLabel`, `excludeSemantics`, heading levels). **NO `MergeSemantics`.** Ensure touch targets meet guidelines (e.g., >= 48dp).
- **Error Handling:** Implement according to `/docs/technical/error_handling.md` or `patterns.md`. Use `ErrorReportingService` where appropriate.
- **JSON Serialization:** Use `json_serializable` correctly per `/docs/technical/patterns.md`. Ensure models have required annotations and factories.
- **Deprecated Code:** **MANDATORY:** During analysis/planning, identify deprecated Flutter/Dart APIs/widgets in the relevant context. Propose specific replacements and include fixing them in the plan/action summary as high-priority technical debt.

## 5. Windsurf Memory Usage (Project Specific)

- **Purpose:** Use Memories to store validated, project-specific learned patterns, common solutions, anti-patterns, architectural decisions, and user preferences.
- **Key Prefixes (Suggestion):**
  - `pattern:<area>:<name>` (e.g., `pattern:widget:responsive_card`, `pattern:state:viewmodel_disposal`)
  - `decision:<scope>:<description>` (e.g., `decision:di:use_singleton_for_auth_service`)
  - `preference:<feature>:<detail>` (e.g., `preference:ui:use_blue_primary_color`)
  - `snippet:<purpose>:<name>` (e.g., `snippet:error:standard_try_catch_reporting`)
- **Consultation:** Actively query relevant memories during the Analysis & Planning phase. Reference specific memory keys in plan justifications.
- **Updates:** Propose adding/updating memories following the process in `global_rules`, Section 3. Use clear, descriptive keys and concise, accurate values.

## 6. Workflow Adherence

- Follow the **Analyze -> Plan/Summarize -> [Approve] -> Execute -> Verify -> Report** cycle from `global_rules`.
- Adapt planning detail based on task complexity.
- Utilize Windsurf tools (`@file`, `@outline`, Cascade edits, terminal, memory read/write) diligently.
- Verify changes against requirements (`/docs/project/`), patterns (`/docs/technical/`, memories), and quality standards.